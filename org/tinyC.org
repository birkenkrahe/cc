#+TITLE:Tiny C Projects by Dan Gookin
#+AUTHOR: Dan Gookin (Manning, 2022)
#+STARTUP:overview hideblocks
#+PROPERTY: header-args:bash :exports both :comments both :results output :tangle yes
* README

  - Based on Dan Gookin's "Tiny C Projects" (2022). This book contains
    a set of interesting C programming projects

  - Projects include programs to manipulate the shell, cybersecurity
    programs, a password generator, a file finder, a calendar, lotto
    picks and text manipulation utilities (i.e. "useful" programs)

  - The book assumes knowledge of C (I'm not assuming anything here
    however)

  - C is a typical language for programs that make your life easier and
    that are fast

* Programming daily greetings

  - It is nice to see what you can do with little effort
  - In this inaugural lecture, we will create a daily greeting
  - The greeting will greet you whenever you log in
  - All of this happens "close to the machine" (C's credo)

** What will we cover?

   - [ ] Review the Linux startup process.
   - [ ] Discover the Linux shell script language.
   - [ ] Write a simple greetings program.
   - [ ] Modify greetings program to add time of day.
   - [ ] Update the timestamp with the current moon phase.
   - [ ] Enhance the greeting message with a /bon mot/.

** What is the shell?

   - The shell program sits between the user and the operating system
   - Linux, Windows, MacOS are examples for operating systems (OS)
   - This program starts whenever the basic setup is finished
   - There are many different shell programs: ~bash~, ~csh~, ~ksh~, ~sh~ etc.
     #+attr_html: :width 500px
     #+caption: table 2.1 from Gookin (2022)
     [[../img/tinyC_shells.png]]

** What shell program are we using?

   - In the code block below, shell commands are executed
   - The ~echo~ command prints whatever comes after it to the screen
   - The expression ~$SHELL~ is a shell program variable
   - A variable can store different values
   - Comments after ~##~ are not executed by the shell program
     #+begin_src bash :exports both
       echo $SHELL    ## print shell program and location
     #+end_src

     #+RESULTS:
     : /bin/bash

   - The result of this command is the location of the program ~bash~ in
     the file tree
   - ~/bin~ is the directory where most of the system programs are
     located - the equivalent of ~C:\Windows\System32\~ on Windows

** How are you executing this?

   - What you see here is a so-called /Org-mode code block/
   - /Org-mode/ is a plugin for the GNU Emacs editor
   - A /code block/ lets you execute code inside a document
   - Org-mode turns the document into an interactive notebook
   - This is a form of /literate programming/
   - The short formula for literate programming is:
     #+begin_quote
     document + code + output = story
     #+end_quote
   - This is also what you'll be doing for this whole course!

** What happens when we run a shell program?

   - To see this, look at the output of the ~ps~ command
   - The ~ps~ command lists all current /processes/
   - Linux commands accept /options/, e.g. ~-p PID~
     #+begin_src bash :exports both
       ## print process of the current script
       ps -p $$
     #+end_src

     #+RESULTS:
     :   PID TTY          TIME CMD
     : 23059 ?        00:00:00 bash
   - You see the ~PID~ (~$$~ stands for the current script), the ~TIME~ this
     process has run in the CPU, and the name of the command as ~CMD~.
   - From the ~PID~, you can see that there are thousands of live processes
   - From the ~TIME~, you can see that the CPU takes virtually no time to
     run this (or most other processes)
   - To see other processes, try ~ps -alh~ - this option provides a lot
     more information - the kind that system administrators need
     #+begin_src bash
       ## print all processes in long format
       ps -alh
     #+end_src

     #+RESULTS:
     #+begin_example
     4     0   623     1  20   0   8264  3696 -      Ss   tty1       0:00 /bin/login -f
     4  1000   983   623  20   0   8644  3708 do_wai S    tty1       0:00 -bash
     0  1000  1131   983  20   0   1976  1176 do_wai S+   tty1       0:00 /bin/sh /usr/bin/startx
     0  1000  1153  1131  20   0   3756   704 do_wai S+   tty1       0:00 xinit /etc/X11/xinit/xinitrc -- /etc/X11/xinit/xserverrc :0 vt1 -keeptty -auth /tmp/serverauth.WLi7BSMVEL
     0  1000  1154  1153  20   0 329608 79508 do_epo Sl   tty1       3:34 /usr/lib/xorg/Xorg -nolisten tcp :0 vt1 -keeptty -auth /tmp/serverauth.WLi7BSMVEL
     0  1000  1158  1153  20   0  55804 12228 poll_s Sl   tty1       0:01 /usr/bin/lxsession -s LXDE-pi -e LXDE
     0  1000  1257  1158  20   0 294624 78248 poll_s Sl   tty1       2:27 mutter
     0  1000  1260  1158  20   0  48876 10932 poll_s Sl   tty1       0:00 lxpolkit
     0  1000  1262  1158  20   0 565480 71380 poll_s Sl   tty1       0:38 lxpanel --profile LXDE-pi
     0  1000  1263  1158  20   0 342900 77208 poll_s Sl   tty1       0:05 pcmanfm --desktop --profile LXDE-pi
     0  1000  1272     1  20   0  52348 27312 poll_s S    tty1       0:00 /usr/bin/python3 /usr/share/system-config-printer/applet.py
     0  1000  1275     1  20   0  47200  5952 poll_s Sl   tty1       0:00 /usr/libexec/at-spi-bus-launcher --launch-immediately
     0  1000  1313  1275  20   0   7556  3392 do_epo S    tty1       0:00 /usr/bin/dbus-daemon --config-file=/usr/share/defaults/at-spi2/accessibility.conf --nofork --print-address 3
     0  1000  1361     1  20   0  32520  6712 poll_s Sl   tty1       0:01 /usr/libexec/at-spi2-registryd --use-gnome-session
     0  1000  2298  1262  20   0 124432 35344 poll_s Sl   tty1       0:25 lxterminal
     0  1000 14754  2298  20   0   8624  3824 poll_s Ss+  pts/1      0:00 bash
     4  1000 17338  1262  20   0 416844 173412 pipe_r Sl  tty1       5:07 /snap/emacs/1733/usr/bin/emacs
     0  1000 17390 17338  20   0   8556  3836 wait_w Ss+  pts/3      0:00 /bin/bash --noediting -i
     #+end_example
   - Lastly, try ~ps -alH~, which includes information on process nesting:
     here you see e.g. that ~emacs~ was called from a terminal program
     #+begin_src bash :exports both
       ## print all processes and show process hierarchy
       ps -aH
     #+end_src
     #+RESULTS:
     #+begin_example
       PID TTY          TIME CMD
       983 tty1     00:00:00 bash
      1131 tty1     00:00:00   startx
      1153 tty1     00:00:00     xinit
      1154 tty1     00:03:26       Xorg
      1158 tty1     00:00:01       lxsession
      1257 tty1     00:02:20         mutter
      1260 tty1     00:00:00         lxpolkit
      1262 tty1     00:00:37         lxpanel
      2298 tty1     00:00:25           lxterminal
     17338 tty1     00:04:50           emacs
      1263 tty1     00:00:04         pcmanfm
      1361 tty1     00:00:01 at-spi2-registr
      1275 tty1     00:00:00 at-spi-bus-laun
      1313 tty1     00:00:00   dbus-daemon
      1272 tty1     00:00:00 applet.py
     #+end_example

   - To learn more about the ~ps~ command or any other Linux command, look
     for the command's manual ("man") page: [[https://man7.org/linux/man-pages/man1/ps.1.html][online version for ps(7)]]

   - To get more deeply into all of this, attend my course on Operating
     Systems (CSC 420) and/or read "The Linux Command Line" by Shotts
     (2021).

** Intermission: what have we learnt already?

   - There are user and system programs
   - The shell is a system program - e.g. ~bash(1)~
   - Computers normally operate with an operating system (OS)
   - The OS controls thousands of processes "simultaneously"
   - Commands take arguments (to work with), e.g. ~echo TEXT~
   - Commands take options (to alter them), e.g. ~ps -H~
   - Commands and terms used:

     | TERM           | MEANING                          |
     |----------------+----------------------------------|
     | ~echo~           | print argument to shell          |
     | ~$SHELL~         | shell program (variable)         |
     | ~/bin/bash~      | file tree location               |
     | ~##~             | script comment mark              |
     | ~ps -alhH~       | process listing w/options        |
     | ~ps -p PID~      | list process labeled ~PID~         |
     | ~bash(1)~, ~ps(7)~ | Unix-style manual pages          |
     | Org-mode       | Editor plugin (Emacs major mode) |

   - Most computer users will never know what you already know!

** What is a shell startup script?

   - When a ~bash~ shell is started, it looks for a startup script
   - You can configure the shell using the startup script
   - We're going to add a greeting and customize it
   - 'Script' is really annother name for a program, usually reserved
     for programming languages that interpret rather than compile code
   - Code interpretation means "take the code and run it"
   - Code compilation means "translate code to something the machine
     understands" (and then run the 'machine code').

** How can you find and view the shell startup script?

   - To view the file use the ~cat~ command:
     #+BEGIN_SRC bash
       cat ~/.bash_profile
     #+END_SRC

   - This either gives you something (if ~.bash_profile~ exists) or
     nothing and an error (if it doesn't):
     #+begin_example bash
     cat: /home/pi/.bash_config: No such file or directory
     #+end_example

   - The curious expression ~~/~ is short for "your home directory":
     this is the place where the computer stores your stuff

   - The dot in the filename ~./bash_profile~ means that this is a
     "hidden" (configuration) file. In Windows you can configure your
     file explorer to view these files
     #+attr_html: :width 500px
     #+caption: Windows 10 File Explorer
     [[../img/tinyC_hidden.png]]

** How can you create and edit the startup script?

   - At this point, we don't want get into editing with an editor app
     quite yet - we will have to and when we do, we'll get started
     with a powerful one, [[https://gnu.org/software/emacs][GNU Emacs]].

   - Instead, we use the shell itself to ~echo~ lines to the script -
     this is OK as long as there are only a few and as long as we
     don't make mistakes - ~bash~ is not very smart or forgiving:
     #+begin_src bash
       echo '#!/bin/bash'
       echo '#startup greetings' >> ~/.bash_profile
       echo 'echo "Hello" $LOGNAME' >> ~/.bash_profile
       cat ~/.bash_profile
     #+end_src

     #+RESULTS:
     : #!/bin/bash
     : #startup greetings
     : echo "Hello" $LOGNAME

   - In the previous /code block/, three lines are added to the file
     ~.bash_profile~ that resides in ~$HOME~ (~/home/pi~ or ~~/~):
     1) This is a shell script (~#!~ is called "[[https://en.wikipedia.org/wiki/Shebang_(Unix)][shebang]]")
     2) A comment: ~startup greetings~ (not executed)
     3) A greeting: ~Hello~ followed by the content of ~$LOGNAME~

   - The variable ~$LOGNAME~ is set to your user or login name:
     #+begin_src bash
       echo $LOGNAME
       ,#+end_src7

       ,#+RESULTS:
       : pi

       - However, if you try to run ~.bash_profile~, you are stumped:
       ,#+begin_src bash
       ~/.bash_profile
     #+end_src

   - This generates the /error message/:
     #+begin_src bash
       bash: line 1: /home/pi/.bash_profile: Permission denied
     #+end_src

   - A long listing of the file reveals that the file /permissions/ are
     only read (~r~) or write (~w~):
     #+begin_src bash
       ls -la ~/.bash_profile
     #+end_src

     #+RESULTS:
     : -rw-r--r-- 1 pi pi 41 Dec 10 22:46 /home/pi/.bash_profile

   - Let's add execute (~x~) to the permissions and then run it:
     #+begin_src bash
       chmod +x ~/.bash_profile
       ~/.bash_profile
     #+end_src

     #+RESULTS:
     : Hello pi

   - It works now! From now on, every time you open a new shell,
     you'll be greeted. Try it yourself - open a new terminal shell
     and you should see ~Hello pi~ at the top of the shell screen.

** Intermission: what did you learn?

   These last two sections contained a lot of lingo - let's go through
   it. If you think you know what a term means already, good for you!

   | COMMAN/TERM     | MEANING                                      |
   |-----------------+----------------------------------------------|
   | Script          | Human-readable set of tasks for computers    |
   | Interpretation  | Take the code and run it                     |
   | Compilation     | Create a machine version of the code         |
   | Machine code    | Code that only the machine can understand    |
   | ~cat~ [file]      | view file                                    |
   | ~~/~              | short for user home directory (~$HOME~)        |
   | ~.~[file]         | file is hidden (configuration file)          |
   | Editor          | Software to create and change files          |
   | GNU Emacs       | GNU " Editor MACroS" popular text editor     |
   | ~#!/bin/bash~     | First line of bash script with shebang       |
   | code block      | Block of code (here in Emacs Org-mode)       |
   | ~$LOGNAME~        | Name of user who is logged in (you)          |
   | File permission | Permitted to read, write, execute (~rwx~) file |
   | ~chmod~           | Program to change file permissions           |

* A first C program

  - The classic first program in any language is "hello world"
  - The program write "hello world" to the screen
  - As simple as it sounds, this involves a bunch of computing

** What will you learn?

   - [ ] A first C command (~printf~ to print something)
   - [ ] How a complete C program looks like
   - [ ] How a C program is turned into machine code
   - [ ] How to get around in the file tree

** The first C command - ~printf~

   - The next code block contains a first command in C:
     #+begin_src C
       printf("Hello, Marcus!\n");
     #+end_src

   - I run this code block with the editor command ~C-c C-c~. It's not a
     program but only a single command inside a program. Emacs helps me
     with running it by supplementing the code around the program and
     by compiling, linking and running the machine code.

** How does a complete C program look like?

   - The complete version of the program looks like this:
     #+begin_src C :tangle ../src/hello.c :results none :comments none
       #include <stdio.h>

       int main(void)
       {
         printf("Hello, Marcus!\n");

         return(0);
       }
     #+end_src

   - To turn this program into an executable file, you need to
     1) /tangle/ the code block (extract the C code) as a C file
     2) compile the resulting C file into machine code
     3) run the machine code
     #+begin_src bash
       cd ../src/
       gcc hello.c -o hello
       ./hello
     #+end_src

     #+RESULTS:
     : Hello, Marcus!

   - Let's take the last ~bash~ code block apart:
     1) ~cd ../src~ changes the location to the ~src~ directory after
        going up one level in the file tree with ~..~
     2) ~../src/~ is a /relative path/, an address for the computer to
        find a location.
     3) You can also specify /absolute paths/ which begin at the /root/ of
        the computer's file tree (~/~), e.g. ~/home/pi/~
     4) The C file ~hello.c~ is compiled with the ~gcc~ compiler
        software[fn:1]
     5) The resulting /object C code/ is /linked/ to create an /executable/
        file named ~hello~.
     6) The name of the executable is specified with a /compiler
        option/, ~-o~

   - Let's take the program itself apart:
     1) ~#include~ is a pre-processing directive to include a file
     2) The included /header/ file ~stdio.h~ contains input/output
        functions (it's a C file located in ~/usr/include/)~
     3) When searching for the file, use ~$PATH~, which stores all
        locations the computer always looks through
     4) ~int main(void) { }~ is the main function - all C code must be
        inside the curly brackets
     5) ~printf("Hello, Marcus!\n");~ prints the /string/ of /characters/
        between the double apostrophs and adds a /newline/ at the end
     6) ~return (0);~ returns ~0~ if all went well
     7) All commands need to finish with a ~;~ 

** What did we learn?

   | TERM/COMMAND     | MEANING                                     |
   |------------------+---------------------------------------------|
   | ~C-c C-c~          | Keys to run Emacs Org-mode code block       |
   | tangle file      | Extract source code from literate file      |
   | Relative path    | Location relative to where you are (~$PWD~)   |
   | Absolute path    | Location relative to the file tree root (~/~) |
   | ~cd~               | Change working directory (up, down or stay) |
   | ~.c~               | File extension for C source files           |
   | ~gcc~              | GNU C Compiler                              |
   | ~gcc~ [f1] ~-o~ [f2] | Compile ~f1~ and create executable ~f2~         |
   | ~#include~ [file]  | Preprocessor directive "include file"       |
   | ~$PATH~            | Locations the computer looks for software   |
   | ~stdio.h~          | C header file to input and output data      |
   | ~printf~           | C function to print arguments to screen     |
   | ~"hello"~          | A string of characters (~h~, ~e~ , ~l~, ~o~)        |
   | ~\n~               | An escape character that adds a new line    |
   | ~return~           | Return flag for (un)successful completion   |

* TODO Practice    
* References

  - Gookin D (2022). Tiny C Projects. Manning.
  - Shotts W (2021). The Linux Command Line. NoStarch Press. Free PDF
    version at [[https://linuxcommand.org][linuxcommand.org]]
* Footnotes

[fn:1] (~gcc~ stands for "GNU C Compiler" - that's the same "GNU" as in
"GNU Emacs". GNU is a so-called recursive acronym. It stands for
"GNU's Not Unix". GNU is an free operating system (OS) created
originally by Rchard Stallman for the Free Software Foundation
([[https://fsf.org/][fsf.org]]). Linux is another OS distributed freely and openly under a
[[https://gnu.org/licenses/][GNU license]].
