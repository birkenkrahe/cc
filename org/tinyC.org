#+TITLE:Tiny C Projects by Dan Gookin
#+AUTHOR: Dan Gookin (Manning, 2022) 
#+STARTUP:overview hideblocks indent
#+PROPERTY: header-args:C :main yes :includes <stdio.h> :exports both :comments both :results output
#+PROPERTY: header-args:bash :exports both :comments both :results output
* README

  - This book contains a set of interesting C programming projects

  - They include programs to manipulate the shell, cybersecurity
    programs, a password generator, a file finder, a calendar, lotto
    picks and text manipulation utilities (i.e. "useful" programs)

  - C is a typical language for programs that make your life easier and
    that are fast

* Daily greetings

* What will we cover?

- [ ] Review the Linux startup process.
- [ ] Discover the Linux shell script language.
- [ ] Write a simple greetings program.
- [ ] Modify greetings program to add time of day.
- [ ] Update the timestamp with the current moon phase.
- [ ] Enhance the greeting message with a /bon mot/.

** What is the shell?

- The shell program sits between the user and the operating system

- Linux, Windows, MacOS are examples for operating systems (OS)

- This program starts whenever the basic setup is finished

- There are many different shell programs: ~bash~, ~csh~, ~ksh~, ~sh~ etc.
  
** What shell program are we using?

- In the code block below, shell commands are executed

- The ~echo~ command prints whatever comes after it to the screen

- The expression ~$SHELL~ is a shell program variable

- A variable can store different values

- Comments after ~##~ are not executed by the shell program
  #+begin_src bash
    echo $SHELL    ## print shell program and location
  #+end_src

  #+RESULTS:
  : /bin/bash

** How are you executing this?

- What you see here is a so-called /Org-mode code block/

- /Org-mode/ is a plugin for the GNU Emacs editor

- A /code block/ lets you execute code inside a document

- Org-mode turns the document into an interactive notebook

- This is a form of /literate programming/

- The short formula for literate programming is:
  #+begin_quote
    document + code + output = story
  #+end_quote

- This is also what you'll be doing for this whole course!
  
** What happens when we run a shell program?

- To see this, look at the output of the ~ps~ command

- The ~ps~ command lists all current /processes/

- Linux commands accept /options/, e.g. ~-p PID~

- This option prints the process ID of the currently executed process

  #+begin_src bash
    ps -p $$
  #+end_src

  #+RESULTS:
  :   PID TTY          TIME CMD
  : 22174 ?        00:00:00 bash

- You see the ~PID~ (~$$~ stands for the current script), the ~TIME~ this
  process has run in the CPU, and the name of the command as ~CMD~.

- From the ~PID~, you can see that there are thousands of live processes

- From the ~TIME~, you can see that the CPU takes virtually no time to
  run this (or most other processes)

- To see other processes, try ~ps -alh~ - this option provides a lot
  more information - the kind that system administrators need
  #+begin_src bash
    ps -alh
  #+end_src

  #+RESULTS:
  #+begin_example
  4     0   623     1  20   0   8264  3696 -      Ss   tty1       0:00 /bin/login -f
  4  1000   983   623  20   0   8644  3708 do_wai S    tty1       0:00 -bash
  0  1000  1131   983  20   0   1976  1176 do_wai S+   tty1       0:00 /bin/sh /usr/bin/startx
  0  1000  1153  1131  20   0   3756   704 do_wai S+   tty1       0:00 xinit /etc/X11/xinit/xinitrc -- /etc/X11/xinit/xserverrc :0 vt1 -keeptty -auth /tmp/serverauth.WLi7BSMVEL
  0  1000  1154  1153  20   0 328584 77988 do_epo Sl   tty1       2:48 /usr/lib/xorg/Xorg -nolisten tcp :0 vt1 -keeptty -auth /tmp/serverauth.WLi7BSMVEL
  0  1000  1158  1153  20   0  55804 12228 poll_s Sl   tty1       0:01 /usr/bin/lxsession -s LXDE-pi -e LXDE
  0  1000  1257  1158  20   0 294640 78080 poll_s Sl   tty1       1:51 mutter
  0  1000  1260  1158  20   0  48876 10932 poll_s Sl   tty1       0:00 lxpolkit
  0  1000  1262  1158  20   0 564924 70904 poll_s Sl   tty1       0:33 lxpanel --profile LXDE-pi
  0  1000  1263  1158  20   0 342900 77208 poll_s Sl   tty1       0:04 pcmanfm --desktop --profile LXDE-pi
  0  1000  1272     1  20   0  52348 27312 poll_s S    tty1       0:00 /usr/bin/python3 /usr/share/system-config-printer/applet.py
  0  1000  1275     1  20   0  47200  5952 poll_s Sl   tty1       0:00 /usr/libexec/at-spi-bus-launcher --launch-immediately
  0  1000  1313  1275  20   0   7556  3392 do_epo S    tty1       0:00 /usr/bin/dbus-daemon --config-file=/usr/share/defaults/at-spi2/accessibility.conf --nofork --print-address 3
  0  1000  1361     1  20   0  32520  6712 poll_s Sl   tty1       0:00 /usr/libexec/at-spi2-registryd --use-gnome-session
  0  1000  2298  1262  20   0 124432 35344 poll_s Sl   tty1       0:25 lxterminal
  0  1000 14754  2298  20   0   8624  3824 poll_s Ss+  pts/1      0:00 bash
  4  1000 17338  1262  20   0 374444 145992 pipe_r Sl  tty1       3:27 /snap/emacs/1733/usr/bin/emacs
  0  1000 17390 17338  20   0   8556  3836 wait_w Ss+  pts/3      0:00 /bin/bash --noediting -i
  #+end_example

- Lastly, try ~ps -alH~, which includes information on process nesting:
  here you see e.g. that ~emacs~ was called from a terminal program

  #+begin_src bash
    ps -aH
  #+end_src

  #+RESULTS:
  #+begin_example
    PID TTY          TIME CMD
    983 tty1     00:00:00 bash
   1131 tty1     00:00:00   startx
   1153 tty1     00:00:00     xinit
   1154 tty1     00:02:47       Xorg
   1158 tty1     00:00:01       lxsession
   1257 tty1     00:01:50         mutter
   1260 tty1     00:00:00         lxpolkit
   1262 tty1     00:00:33         lxpanel
   2298 tty1     00:00:25           lxterminal
  17338 tty1     00:03:22           emacs
   1263 tty1     00:00:04         pcmanfm
   1361 tty1     00:00:00 at-spi2-registr
   1275 tty1     00:00:00 at-spi-bus-laun
   1313 tty1     00:00:00   dbus-daemon
   1272 tty1     00:00:00 applet.py
  #+end_example

- To get more deeply into all of this, attend my course on Operating
  Systems (CSC 420) and/or read "The Linux Command Line" by Shotts
  (2021).


* REFERENCES

- Gookin D (2022). Tiny C Projects. Manning.
- Shotts W (2021). The Linux Command Line. NoStarch Press. Free PDF
  version at [[https://linuxcommand.org][linuxcommand.org]]

