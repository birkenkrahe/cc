#+TITLE: C Fundamentals practice
#+AUTHOR: [yourName] (pledged)
#+PROPERTY: header-args:C :main yes :includes <stdio.h> :results output :exports both :comments both
* READ README

  - This file is a practice file for C fundamentals.

  - You will learn how to:
    1) understand and change syntax highlighting
    2) understand and use comments in C
    3) type, declare and initialize variables
    4) format printout and fix formatting errors
    5) read and store input from the command line
    6) name identifiers correctly
    7) structure programs efficiently

  - Time: approx. 30-60 min.

  - When you're done with a section move the cursor on the section
    heading and type ~S-<right>~ (or SHIFT+<right-arrow>).

   - When you leave class without having completed the file, save a
    copy to GDrive as a backup and/or to work on it from home

  - When you've completed the file, upload it to Canvasx
    
* TODO Identify yourself

  - replace ~[yourName]~ in the header of this file by your name
  - add ~(pledged)~ next to your name (as in "I obey the honor code")
  - Change the "TODO" in the headline to "DONE" (~S-<right>~)
  - save the file (~C-x C-s~). 

* TODO Syntax highlighting

  1) Create a code block named ~pgm:hello~ with a program that prints
     "Hello, world!" on the screen. Use the ~<s~ template to create the
     block.

     /Tip: the program itself consists of only one mandatory line!/

  2) Run the program in Emacs to make sure that it works.

  3) Open the themes chooser with ~M-x custom-themes~. In the buffer,
     uncheck the current theme and check another. Then return here
     (~C-x b~) to see the effect on your hello world program.
 
  4) If you like a theme especially well, you save it for future
     sessions if you like by clicking on ~Save Theme Settings~. You get
     the message ~Custom theme saved for future sessions~ in the
     minibuffer.

  ----- Put code block here -----


* TODO Fix the program

  The program [[pgm:comment1]] should print out the sentence "~I love my
  dog 'Milly'~". But it doesn't. Instead it prints:

  #+begin_example
   I dog 'Milly'
  #+end_example

  Something went wrong with the comments. Fix the program and run it
  again.

  #+name: pgm:comment1 
  #+begin_src C
    printf("I "); /****     
			 printf("love "); 
			 printf("my ");   ****/     
    printf("dog"); 
    printf(" 'Milly'"); //* I really do! */
  #+end_src

* TODO Comment program

   Write short comments in the program [[pgm:comment2]] to explain what each
   part of the program does (guess if you don't know for sure) -
   comment at least whenever you see ~WRITE COMMENT HERE~.

   #+name: pgm:comment2
   #+begin_src C
     #include <stdio.h> // WRITE COMMENT HERE

     int main (void) // WRITE COMMENT HERE
     {
       /* 
	 WRITE COMMENT HERE */
       int i = 1;

       // WRITE COMMENT HERE
       printf("%d\n", i);

       return 0;
     }
   #+end_src

   #+RESULTS: pgm:comment2
   : 1

   The program contains so-called /inline/ comments ~//~ and /multi-line/
   comments: ~/* ... */.~

* TODO Variable types and declarations

  1) Create a named C code block pgm:declarations [[pgm:declarations]] below.

  2) Declare two /floating-point/ variables ~fahrenheit~ and ~celsius~.

  3) Use two separate statements.

  4) Put ~:results silent~ in the code block header[fn:1].

  5) Run the code block (~C-c C-c~).

  ----- PUT CODE BLOCK HERE -----

* TODO Fix the program

  1) A couple of things are wrong in the code block [[pgm:declare1]].

  2) You can check that yourself by running it (~C-c C-c~) and reading
     the compiler messages that open in another buffer. Type ~C-x 1~ to
     delete the message buffer.

  3) Find and fix the errors, and run the code block to make sure.

  #+name: pgm:declare1
  #+begin_src C :results silent
    freezing_point = 32.0f
      float freezing_point;
   #+end_src

* TODO Variable assignments

  1) Create a code block [[pgm:assignments]] below.

  2) Declare *and* initialize two /floating-point/ variables, ~freezing~ and
     ~factor~, with the values 32 and 5/9, respectively.

  3) Declare and initialize these variables in *one* statement only.

  ----- PUT CODE BLOCK HERE -----

* TODO Variable computations

  1) The code from [[pgm:declarations]] and from [[pgm:assignments]] has
     been copied into the code block [[pgm:conversion]] below[fn:2].

  2) Complete [[pgm:conversion]] with two statements:
     - assign the temperature 80 to ~fahrenheit~
     - compute ~celsius~ using [[pgm:formula]]

  3) Run the program to make sure that the answer is correct for 80
     degrees Fahrenheit (equivalent to 26.7 degrees Celsius).

     #+name: pgm:formula
     #+begin_example
     celsius = (fahrenheit - freezing) * factor
     #+end_example
       
  #+name: pgm:conversion
  #+begin_src C :noweb yes
    <<pgm:declarations>>
    <<pgm:assignments>>
    ...
    ...
    printf("Fahrenheit: %g\nCelsius equivalent: %.1f\n", 
	   fahrenheit, celsius);
  #+end_src

* TODO Fix the program

  The program [[pgm:assign_err]] declares and initializes the variable ~i~ with the
  value ~0~. After assigning ~1~ to ~i~, it should print out ~1~ but it prints
  ~0~ instead.

  Fix the error and then run the block with ~C-c C-c~ to check.

  #+name: pgm:assign_err
  #+begin_src C
    int i = 0;
    i == 1;
    printf("%d\n", i);
  #+end_src

  #+RESULTS: assign
  : 0

* TODO Formatting printout

  1) Define and initialize three variables in a code block named
     [[pgm:format]]:
     - an integer variable ~foo~ with value 100
     - a floating-point variable ~bar~ with value 100
     - a character variable ~baz~ with value A

  2) Print the three variables so that the output looks like shown below.

  3) Use 
     - ~puts~ for the headline "Three variables",
     - ~printf~ to print ~foo~ and ~bar~, and
     - ~putchar~ to print ~baz~.

     /Tip:/ The final program [[pgm:format]] has 7 lines.

     Output:
     #+begin_example 
     Three variables:
     foo = 100
     bar = 100.01
     baz = A
     #+end_example

  ----- PUT CODE BLOCK HERE -----
  
* TODO Fix the program

  The program [[pgm:format_error]] should print out

  #+begin_example
    Speed of light (m/s): c = 299792458
    Euler number: e = 2.7183
  #+end_example

  But instead it print out this:

  #+begin_example
    Speed of light (m/s): c = 14.985029
    Euler number: e = 0
  #+end_example
  
  Fix the program to get the right output!

  #+name: pgm:format_error
  #+begin_src C
    int c = 299792458;
    float e = 2.718282f;

    printf("Speed of light (m/s): c = %f\n", c);
    printf("Euler number: e = %d\n", e);
  #+end_src

* TODO Constants

  1) Create a C code block named [[pgm:constants]] with three different
     constant definitions.

  2) Define the Arkansas sales tax rate (6.5%) as ~SALES_TAX_AR~ using
     the ~#define~ pre-processor macro.

  3) Define the Euler number using ~M_E~ in ~math.h~, and call it ~EULER~.

  4) Define the speed of light as ~SPEED_OF_LIGHT~ using ~const~.

  5) Print all three definitions to get the output:

     #+begin_example
      The Euler number is: e = 2.7182818285
      The AR sales tax is: 6.5%
      The speed of light is: 299792458 m/s
     #+end_example

  ----- PUT CODE BLOCK HERE -----

* TODO Standard math library

  Open the file ~/usr/include/math.h~ and search for the definition of
  ~M_PI~. What is the last non-zero digit?

* TODO Reading input

  1) Copy the code block [[pgm:iscan]] below into a code block [[pgm:fscan]]

  2) Modify [[pgm:fscan]] so that it reads a floating-point variable ~x~
     instead of an integer variable ~i~.

  2) The /format specifier/ for ~float~ numbers is ~%f~.

  3) Create an input file named ~finput~ in ~$PWD~ and put the number
     ~3.141593~ into it.

  4) Run [[pgm:fscan]]

  #+name: pgm:iscan
  #+begin_src C :cmdline < ./data/input
    int i;
    puts("Enter an integer!");
    scanf("%d", &i);
    printf("You entered %d\n", i);
  #+end_src

  #+RESULTS: pgm:iscan
  : Enter an integer!
  : You entered 5

* TODO Naming identifiers

  Naming conventions dictate that you should use 
  - upper case letters for constants
  - lower case letters for variables and function names
  - separate names with underscore or insert capital letters
  - name according to function

  1) In the code block [[pgm:nomenEstOmen]], complete the code according to
     these rules.

  2) Run the code block with the additional header-argument ~:flags
     -Wall~ to see if you get any warnings.

  #+name: pgm:nomenEstOmen
  #+begin_src C :results silent
    // integer constant for the speed of light
    const int ... = 299792458;

    // floating-point constant for pi
    #define ... 3.141593f

    // integer variable for volume computations
    int ...

    // character variable for last names
    char ...

    // function that adds two integers i and j
    int ... (i,j) {
      return i + j;
    }

    // variable whose name contains "my", "next", and "birthday"
    int ...
  #+end_src

* TODO Fix the program

  The program statements in [[pgm:wrongNames]] contain multiple errors. Find
  them all and fix them if you can so that the program compiles and
  runs without errors - without simply commenting out erroneous code.

  #+name: pgm:wrongNames
  #+begin_src C :flags -Wall :results silent
    int void = 1;

    double 10_times;

    float _long = 10.45;

    char else;

    const int ui-1 = 1;

    int bottles100 = 100;
  #+end_src

* TODO Program layout
 
  The program [[pgm:layout1]] does not accommodate program layout
  conventions (though it will compile and run). Fix that.

  /Tip:/ sort the different parts of the program first. The comments
  might be helpful for that.

  The output looks liks this:
  #+begin_example
    I'm gonna print a number now.
    The number is 100
    100*(-1)=-100
  #+end_example

  #+name: pgm:layout1
  #+begin_src C
    const X=100.;puts("I'm gonna print a number now.");printf("The number is %d\n", X);

    // declarations

    // computation
    int i=-1;int y; y = X * i;printf( // print result of computation
			      "%d*(%d)=%d\n",X,i,y
			      ); // print constant
  #+end_src
  
* TODO Fix the program

  The program [[pgm:layout2]] violates layout standards and will not
  compile. Fix it and run it - the correct output is: ~1 is not 2~. 

  #+name: pgm:layout2
  #+begin_src C
    #define 
    ONE 1
    #define 
    TWO 2
    printf("%d is not %d\n", ONE, TWO);
  #+end_src

* Footnotes

[fn:2]The header argument ~:noweb~ enables referencing to other
code. Setting it to ~yes~ means that references are expanded when
evaluating, tangling, or exporting. You can check that by tangling the
source code and looking at the result ([[https://orgmode.org/manual/Noweb-Reference-Syntax.html][more info]]).

[fn:1]With ~:results silent~ in the header, the Org-mode code block will
be executed, but the results will not be printed in the buffer, only
in the minibuffer. If there is no printout, the minibuffer shows ~""~
(empty).

    
