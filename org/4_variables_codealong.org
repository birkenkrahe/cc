#+TITLE:C Basics
#+AUTHOR:Marcus Birkenkrahe
#+SUBTITLE:CSC100 Introduction to programming in C/C++ Summer 2022
#+DATE: <2022-05-26 Thu>
#+STARTUP: overview hideblocks indent
#+OPTIONS: toc:1 ^:nil
#+PROPERTY: header-args:C :main yes :includes <stdio.h> :exports both :results output :tangle yes
* README

  - This script summarizes and adds to the treatment by King (2008),
    chapter 2, C Fundamentals - see also [[https://docs.google.com/presentation/d/14qvh00aVb_R09_hrQY0EDEK_JLAkgZ0S/edit?usp=sharing&ouid=102963037093118135110&rtpof=true&sd=true][slides (GDrive)]].

  - To code along during the lecture using Emacs and Org-mode,
    download ~4_variables_codealong.org~ from and open it in Emacs.

  - There is a separate Org-mode file available for practice *after the
    lecture*. Download [[https://tinyurl.com/yckuhh2f][tinyurl.com/yckuhh2f]]

    
    [[https://raw.githubusercontent.com/birkenkrahe/cc101/piHome/3_fundamentals/org/practice.org][practice.org]] using ~wget~ from GitHub as ~practice3.org~:

    #+name: ex:wget
    #+begin_example sh
    wget tinyurl.com/yckuhh2f -O practice3.org -o log
    #+end_example
      
* VARIABLE TYPES AND DECLARATIONS

- Variables must be *declared* before they can be used: define an
  integer variable ~height~, a floating point variable ~profit~, and a
  character variable ~name~:
  #+begin_src C :results silent

  #+end_src

- Several variables of the same type can be declared *together*: run
  this block. Add an integer ~height~, a floating point ~profit~, and a
  character ~last_name~:
  #+begin_src C :results silent
    int length, width, volume;
    float loss;
    char first_name;
  #+end_src

* VARIABLE ASSIGNMENT

- Assign the value ~8~ to the variable ~height~. Try to run the code.
  #+begin_src C

  #+end_src

- The example below would throw another error. What's
  wrong now? 
  #+begin_src C
    height = 8;
    int height;
  #+end_src

- Phew! The next block finally works, that is, it compiles and
  runs. But what does the code actually do?
  #+begin_src C :results silent
    int height;
    height = 8;
  #+end_src

- Define a ~float~ variable named ~profit~, then assign the value ~2150.48~
  to it, marking it as a ~float~.
  #+begin_src C :results silent

  #+end_src

- Run this code:
  #+begin_src C :results silent
    /* ASSIGNING A float TO AN int */
    float profit;
    int iProfit;
    iProfit = 2150.48;  // Don't do this!

    /* ASSIGNING AN int TO AN float */
    float profit;
    int iProfit;
    profit = 2150;  // Don't do this!
  #+end_src

- Add a line to compute ~volume~ as the product of ~height~, ~length~ and
  ~width~:
  #+begin_src C :results silent
    int height, length, width, volume;

    height = 8;
    length = 12;
    width = 10;
 
  #+end_src

- Put all definitions for the variables on one line before the ~printf~ 
  #+begin_src C

    printf("Volume: %d", height * length * width);
  #+end_src

* FORMATTING WITH ~printf~ VS. ~puts~

- Add ~putchar(c)~ after the type declaration and assignment:
  #+begin_src C
    char c = 'A';

  #+end_src

* FORMATTING INTEGER NUMBERS WITH ~%d~

- Complete the ~printf~ statement!
  #+begin_src C
    int height;  // type declaration
    height = 8;  // variable assignment

    printf(...); // formatted printout
  #+end_src
  
* FORMATTING FLOATING-POINT NUMBERS WITH ~%f~

- Complete the ~printf~ statement!
  #+begin_src C
    float profit; // type declaration
    profit = 2150.48f; // variable assignment

    printf(...); // formatted printout
  #+end_src

* CHANGE FLOATING POINT PRECISION

- Change the format to print 2 digits after the decimal point!
  #+begin_src C
    float profit;       // type declaration
    profit = 2150.48f;  // variable assignment

    // formatted printout: 2 digits after decimal point
    printf("The profit is:...\n", profit);
  #+end_src

- Run the code block!
  #+begin_src C
    float profit;       // type declaration
    profit = 2150.48f;  // variable assignment

    printf("The profit is: $%.8f\n", profit); // formatted printout
  #+end_src

* FORMATTING ERRORS

- Format the variable printout!
  #+begin_src C :results output
    float foo;  // declare float
    foo = 3.14f;   // assigned float

    // formatting float as float
    printf("float as float: \n", foo);

    // formating float as int
    printf("float as int: \n", foo);

    int bar;  // defined int
    bar = 314;   // assigned int

    // formatting int as int
    printf("int as int: \n", bar);

    // formatting int as float
    printf("int as float: \n", bar);  // int as float
  #+end_src

* PUTTING IT ALL TOGETHER (EXTENDED EXAMPLE)

- Compute the dimensional ~weight~ by dividing ~volume~ by 166
  #+begin_example C
    volume = 12 * 10 * 8   // volume = height * width * length
    ...  // dimensional weight
  #+end_example

- Now for the final program. I have set it up so that this can be
  tangled as a file ~dweight.c~: create the C file!
  #+begin_src C :results output :tangle dweight.c
    // declare variable types
    int height, length, width, volume, weight;

    // variable assignments
    height = 8;
    length = 12;
    width = 10;
    volume = height * length * width;
    weight = (volume + 165) / 166;

    // print results
    printf("Dimensions: %dx%dx%d\n", length, width, height);
    printf("Volume (cubic inches): %d\n", volume);
    printf("Dimensional weight (pounds): %d\n", weight);
  #+end_src

