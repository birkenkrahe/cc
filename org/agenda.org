#+TITLE: Agenda - Introduction to programming in C++
#+AUTHOR: Marcus Birkenkrahe
#+SUBTITLE: Lyon College, Spring 2023
#+STARTUP:overview hideblocks indent
#+OPTIONS: toc:nil num:nil ^:nil
#+attr_html: :width 400px
[[../img/cover.jpg]]
* Week 1 - Course overview & introduction
#+attr_html: :width 400px
[[../img/week1.png]]

1) [X] Entry *survey* - [[https://docs.google.com/forms/d/1yz2EtuSin3r54zMG1d_JCnnVAGb0XI8cP-Yvr7FmZbo/edit#responses][review of your responses]]
2) [X] Course *overview* - assignments, grading, topics, platforms
3) [X] The C programming *toolchain*: course infrastructure
4) [X] *Practice:* the C programming toolchain

** Review topics/questions (Friday 13-Jan)
#+attr_latex: :width 400px
#+caption: Illustration of ignorance and ignorance of your own ignorance
[[../img/dunningkruger.png]]

Test yourself![fn:1]

Graph: hype cycle (like [[https://www.gartner.com/en/research/methodologies/gartner-hype-cycle][Gartner graph of emerging technologies]]).

- Why is computing infrastructure important?
- What is meta data?
- What is a compiler?

** Why is computing infrastructure important?
#+attr_latex: :width 400px
#+caption: Layers between you and a document on your computer
[[../img/0_infrastructure.jpg]]

- *Scalability:* when you want to go from 10 customers to 1,000,000

- *Reliability:* systems must be available and performant when needed

- *Security:* protect against unauthorized access and cyberthreats

- *Adaptability:* businesses must adapt quickly to stay competitive

- *Changeability:* IT changes faster than most other technologies

** What is meta data?
#+attr_latex: :width 400px
#+caption: Org-mode file with visible meta data
[[../img/0_meta.png]]
#+attr_latex: :width 400px
#+caption: Org-mode file with hidden meta data
[[../img/0_meta1.png]]

*Meta data is data that describes other data.* It provides information
about the characteristics of other data, such as its content, format,
and structure. Meta data can be used to describe many different types
of data, including files, images, videos, documents, and databases.

** What is a compiler (e.g. GCC)?
#+attr_latex: :width 400px
#+caption: Compiler (source: High performance R computing, Packt)
[[../img/compiler.png]]

- A compiler is a type of program that takes *source code* written in a
  high-level programming language and converts it into *machine code*.

- Machine code can be executed directly by a computer's central
  processing unit (CPU).

- The machine code produced by a compiler is specific to the
  architecture of the computer it is being run on.

* Week 2 - Programming environment
#+attr_html: :width 400px
[[../img/0_gnuemacs.png]]

Review:
- [ ] Week 1
- [ ] Glossary terms

Lecture
- [ ] Demo: REPL (replit.com)
- [ ] Lecture: Introduction to C

Practice:
- [ ] Practice: first literate C program (submit Jan 20)
- [ ] Practice/assignment: Emacs tutorial (submit Jan 23)

Test:
- [ ] Test 1 on Monday, Jan-23 (on everything we've done so far)
  
** Review week 1
#+attr_html: :width 400px
#+caption: Literate programming with CWEB
[[../img/cweb.png]]

- [X] What is the command line interface? ("The black thing")
- [X] What is literate programming?
- [X] What is syntax highlighting?
- [X] What is Emacs?

** What is the command line interface?
#+attr_html: :width 400px
#+caption: Command line interface (WSL on Windows with Ubuntu 22.04 LTS)
[[../img/cli.png]]

#+begin_quote ChatGPT
"The command line interface (CLI) is a type of user interface that
allows users to interact with a computer or device by typing commands,
as opposed to using a graphical user interface (GUI) with a mouse or
touchpad. These commands are entered into a terminal or command
prompt, and the computer or device responds by performing the
requested action or displaying the requested information. CLI is
commonly used for tasks such as managing files, running programs, and
configuring system settings." (ChatGPT)
#+end_quote

** What is literate programming?
#+attr_html: :width 400px
#+caption: Literate programming with C and Emacs Org-mode
[[../img/0_litprog1.png]]

- Documentation + code + output in one file
- In the figure, the literate program (~foo.org~) is either tangled into
  source code (~foo.c~) that can be compiled and run, or it is woven
  into a HTML file that you can view in a browser.

#+begin_quote
"Literate programming is a programming paradigm in which a program's
source code is written as an explanatory narrative, rather than just a
sequence of commands. It combines human-readable documentation and
source code into a single document, making the code more easily
understandable and maintainable. The idea behind literate programming
is that code should be written for people to read and understand, not
just for machines to execute. Programs written in a literate
programming style are often more readable and self-documenting, which
can make them easier to understand and modify.

Donald Knuth first coined the term "literate programming" in the early
1980s, and he developed a tool called WEB to support this style of
programming. Nowadays there are other tools like noweb, CWEB, and
org-babel-tangle that can be used to create literate programming
documents." (ChatGPT)
#+end_quote

** What is syntax highlighting?
#+attr_html: :width 400px
#+caption: Raw file without syntax highlighting
[[../img/0_raw.png]]
#+attr_html: :width 400px
#+caption: Syntax highlighting on GitHub (Emacs-Lisp file)
[[../img/0_syntax.png]]

** What is Emacs?
#+attr_latex: :width 400px
#+caption: GNU Emacs screen and properties
[[../img/0_gnuemacs1.png]]

* Week 3 - Introducing C & Emacs tutorial
#+attr_html: :width 400px
[[../img/1_ccpp.png]]

** [[https://lyon.instructure.com/courses/1014/assignments/6701/edit?quiz_lti][Test 1]] (Online, Monday 23 January 3-3.15 pm)
** Test 1 review (in class)
** [[https://lyon.instructure.com/courses/1014/assignments/6463][Canvas file upload]] (~first.org~)
** [[https://lyon.instructure.com/courses/1014/discussion_topics/2070][Week 2 Session summary and test preparation]]
** Introduction to C
** Emacs tutorial (start in class, finish @home)

* Preparing for a test (2.5% each)
#+attr_latex: :width 400px
#+caption: Medieval food preparation
[[../img/preptest.jpg]]

*How do you prepare for a test?*[fn:2]

* Condition for repeating tests
#+attr_latex: :width 400px
#+caption: Late or missed the test? Talk to me!
[[../img/late.jpg]]

- If you inform me beforehand that you cannot attend an announced
  test, we can make arrangements for you to take the test outside of
  class.

* Pros and cons: script vs. shell

* References

Powered by OpenAI's GPT-3 language model, URL: [[https://chat.openai.com][chat.openai.com]].

* Footnotes
[fn:2] (1) Look through the material on GitHub ([[https://github.com/birkenkrahe/cc/tree/piHome/org][Markdown]] or [[https://github.com/birkenkrahe/cc/tree/piHome/pdf][PDF]]). (2)
Check the review of questions at the start of each session. (3) After
each class room session: write down what you didn't understand and ask
me after class or before the next class (or send me an email).

[fn:1]"The Dunning-Kruger effect was first discovered and written
about in 1999, by researchers David Dunning and Justin Kruger at
Cornell University. The researchers spotted how much people
overestimated their own abilities in daily life—think of the guy in
class who keeps raising his hand to relay his useless ideas—and coined
the term “dual burden”. Dual burden was used to describe that these
people suffer from two things: ignorance, and ignorance of their own
ignorance. The researchers tested random participants on tests of
humour, grammar, and logical reasoning. They found that people who
ranked in the bottom 25% of any of these test scores tended to predict
themselves to be at the top of the pack. When they scored in the 12th
percentile, they estimated themselves to be in the 62nd. On the flip
side, people in the top 25% predicted their scores to be slightly
lower than they actually were." (Source: [[https://thedecisionlab.com/biases/dunning-kruger-effect][thedecisionlab.com]])
